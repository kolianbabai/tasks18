Читайте с консоли имена файлов, пока не будет введено слово "exit".
Передайте имя файла в нить ReadThread.
Нить ReadThread должна найти байт, который встречается в файле максимальное число раз, и добавить его в словарь resultMap,
где параметр String - это имя файла, параметр Integer - это искомый байт.
Закрыть потоки.


Требования:
1. Программа должна считывать имена файлов с консоли, пока не будет введено слово "exit".
2. Для каждого файла создай нить ReadThread и запусти ее.
3. После запуска каждая нить ReadThread должна создать свой поток для чтения из файла.
4. Затем нити должны найти максимально встречающийся байт в своем файле и добавить его в словарь resultMap.
5. Поток для чтения из файла в каждой нити должен быть закрыт.

package com.javarush.task.task18.task1823;

import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

/* 
Нити и байты
*/

public class Solution {
    public static Map<String, Integer> resultMap = new HashMap<String, Integer>();

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        String nameFile = null;
        while (true){
            nameFile = scanner.nextLine();

            if(nameFile.equals("exit")){break;}

            ReadThread readThread = new ReadThread(nameFile);
            readThread.start();
        }

        scanner.close();
//        for (Map.Entry<String, Integer> entry : resultMap.entrySet()) {
//
//            System.out.println(entry.getKey() + " " + entry.getValue()); // для проверки
//
//        }
    }



    public static class ReadThread extends Thread {
        private String fileName;

        public ReadThread(String fileName) {
           this.fileName = fileName;

        }

        @Override
        public void run()  {

            ArrayList <Integer> arrayList = new ArrayList<>();

            try {
                FileInputStream fileInputStream = new FileInputStream(fileName);
                while((fileInputStream.available() > 0)){
                    arrayList.add(fileInputStream.read());
                }
                fileInputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }

            int max = 0;
            int desiredByte = 0;
            for(int search: arrayList){

                if(Collections.frequency(arrayList, search) > max){
                    max = Collections.frequency(arrayList, search);
                    desiredByte = search;
                }
            }

            resultMap.put(fileName, desiredByte);
        }
    }
}
